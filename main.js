import { GoogleGenAI } from '@google/genai';

class PromptGenerator {
    constructor() {
        this.ai = null;
        this.initializeElements();
        this.bindEvents();
    }

    initializeElements() {
        // Input elements
        this.apiKeyInput = document.getElementById('apiKey');
        this.promptInput = document.getElementById('prompt');
        this.promptLabel = document.getElementById('promptLabel');
        this.contentTypeTabs = document.querySelectorAll('.tab-btn');
        this.artStyleSelect = document.getElementById('artStyle');
        this.detailLevelSelect = document.getElementById('detailLevel');
        this.aspectRatioSelect = document.getElementById('aspectRatio');
        this.numberOfPromptsSelect = document.getElementById('numberOfPrompts');
        this.modelSelect = document.getElementById('modelSelect');
        this.customSystemPromptInput = document.getElementById('customSystemPrompt');
        this.showDefaultPromptBtn = document.getElementById('showDefaultPromptBtn');
        this.useDefaultPromptBtn = document.getElementById('useDefaultPromptBtn');
        this.defaultPromptViewer = document.getElementById('defaultPromptViewer');
        this.defaultPromptContent = document.getElementById('defaultPromptContent');
        this.editDefaultPromptBtn = document.getElementById('editDefaultPromptBtn');
        this.resetSettingsBtn = document.getElementById('resetSettingsBtn');
        this.negativePromptInput = document.getElementById('negativePrompt');
        this.guidanceScaleInput = document.getElementById('guidanceScale');
        this.guidanceValueSpan = document.getElementById('guidanceValue');
        this.seedInput = document.getElementById('seed');
        
        // Control elements
        this.generateBtn = document.getElementById('generateBtn');
        this.btnText = document.querySelector('.btn-text');
        this.btnLoading = document.querySelector('.btn-loading');
        
        // Output elements
        this.errorMessage = document.getElementById('errorMessage');
        this.loadingMessage = document.getElementById('loadingMessage');
        this.promptResults = document.getElementById('promptResults');
    }

    bindEvents() {
        this.generateBtn.addEventListener('click', () => this.generatePrompts());
        this.guidanceScaleInput.addEventListener('input', (e) => {
            this.guidanceValueSpan.textContent = e.target.value;
        });
        
        // Enter key support for prompt
        this.promptInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && e.ctrlKey) {
                this.generatePrompts();
            }
        });

        // Load saved settings
        this.loadSavedSettings();
        this.apiKeyInput.addEventListener('change', () => this.saveSettings());
        this.modelSelect.addEventListener('change', () => this.saveSettings());
        this.customSystemPromptInput.addEventListener('change', () => this.saveSettings());
        
        // Content type tabs
        this.currentContentType = 'image';
        this.contentTypeTabs.forEach(tab => {
            tab.addEventListener('click', (e) => this.switchContentType(e.target.dataset.type));
        });
        
        // Prompt control buttons
        this.showDefaultPromptBtn.addEventListener('click', () => this.toggleDefaultPromptViewer());
        this.useDefaultPromptBtn.addEventListener('click', () => this.useDefaultPrompt());
        this.editDefaultPromptBtn.addEventListener('click', () => this.editDefaultPrompt());
        this.resetSettingsBtn.addEventListener('click', () => this.resetAllSettings());
    }

    loadSavedSettings() {
        const savedApiKey = localStorage.getItem('gemini_api_key');
        if (savedApiKey) {
            this.apiKeyInput.value = savedApiKey;
        }

        const savedModel = localStorage.getItem('gemini_model');
        if (savedModel) {
            this.modelSelect.value = savedModel;
        }

        const savedSystemPrompt = localStorage.getItem('custom_system_prompt');
        if (savedSystemPrompt) {
            this.customSystemPromptInput.value = savedSystemPrompt;
        }
    }

    saveSettings() {
        const apiKey = this.apiKeyInput.value.trim();
        if (apiKey) {
            localStorage.setItem('gemini_api_key', apiKey);
        } else {
            localStorage.removeItem('gemini_api_key');
        }

        localStorage.setItem('gemini_model', this.modelSelect.value);
        localStorage.setItem('custom_system_prompt', this.customSystemPromptInput.value.trim());
    }

    switchContentType(type) {
        this.currentContentType = type;
        
        // Update tab active state
        this.contentTypeTabs.forEach(tab => {
            tab.classList.remove('active');
            if (tab.dataset.type === type) {
                tab.classList.add('active');
            }
        });

        // Update UI based on content type
        if (type === 'image') {
            this.promptLabel.textContent = '√ù t∆∞·ªüng h√¨nh ·∫£nh c·ªßa b·∫°n:';
            this.promptInput.placeholder = 'V√≠ d·ª•: M·ªôt con m√®o d·ªÖ th∆∞∆°ng ƒëang ng·ªìi tr√™n c·ªè xanh...';
        } else if (type === 'video') {
            this.promptLabel.textContent = '√ù t∆∞·ªüng video c·ªßa b·∫°n:';
            this.promptInput.placeholder = 'V√≠ d·ª•: M·ªôt con m√®o ƒëang ch·∫°y qua c√°nh ƒë·ªìng hoa, camera theo chuy·ªÉn ƒë·ªông...';
        }
    }

    getDefaultSystemPrompt() {
        if (this.currentContentType === 'video') {
            return `B·∫°n l√† m·ªôt chuy√™n gia t·∫°o prompt cho AI Video (Runway ML, Pika Labs, Stable Video). 
Nhi·ªám v·ª• c·ªßa b·∫°n l√† chuy·ªÉn ƒë·ªïi √Ω t∆∞·ªüng ƒë∆°n gi·∫£n th√†nh c√°c prompt video chi ti·∫øt, chuy√™n nghi·ªáp.

Quy t·∫Øc t·∫°o prompt video:
1. B·∫Øt ƒë·∫ßu v·ªõi ch·ªß th·ªÉ v√† h√†nh ƒë·ªông ch√≠nh
2. M√¥ t·∫£ chuy·ªÉn ƒë·ªông, camera movement
3. Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng, b·ªëi c·∫£nh
4. Ch·ªâ ƒë·ªãnh phong c√°ch quay phim
5. Th√™m th√¥ng s·ªë k·ªπ thu·∫≠t (lighting, timing, transition)
6. K·∫øt th√∫c v·ªõi negative prompt (nh·ªØng g√¨ c·∫ßn tr√°nh)

ƒê·ªãnh d·∫°ng tr·∫£ v·ªÅ:
**Video Prompt [s·ªë]:**
[M√¥ t·∫£ chi ti·∫øt b·∫±ng ti·∫øng Anh v·ªõi focus v√†o movement v√† camera]

**M√¥ t·∫£ ti·∫øng Vi·ªát:**
[Gi·∫£i th√≠ch prompt video b·∫±ng ti·∫øng Vi·ªát ƒë·ªÉ ng∆∞·ªùi d√πng hi·ªÉu]

**Negative Prompt:**
[Nh·ªØng g√¨ c·∫ßn tr√°nh trong video b·∫±ng ti·∫øng Anh]

---`;
        } else {
            return `B·∫°n l√† m·ªôt chuy√™n gia t·∫°o prompt cho AI Art (Stable Diffusion, Midjourney, DALL-E). 
Nhi·ªám v·ª• c·ªßa b·∫°n l√† chuy·ªÉn ƒë·ªïi √Ω t∆∞·ªüng ƒë∆°n gi·∫£n th√†nh c√°c prompt chi ti·∫øt, chuy√™n nghi·ªáp.

Quy t·∫Øc t·∫°o prompt:
1. B·∫Øt ƒë·∫ßu v·ªõi ch·ªß th·ªÉ ch√≠nh
2. Th√™m chi ti·∫øt v·ªÅ h√†nh ƒë·ªông, c·∫£m x√∫c
3. M√¥ t·∫£ m√¥i tr∆∞·ªùng, b·ªëi c·∫£nh
4. Ch·ªâ ƒë·ªãnh phong c√°ch ngh·ªá thu·∫≠t
5. Th√™m th√¥ng s·ªë k·ªπ thu·∫≠t (lighting, composition, quality)
6. K·∫øt th√∫c v·ªõi negative prompt (nh·ªØng g√¨ c·∫ßn tr√°nh)

ƒê·ªãnh d·∫°ng tr·∫£ v·ªÅ:
**Prompt [s·ªë]:**
[M√¥ t·∫£ chi ti·∫øt b·∫±ng ti·∫øng Anh]

**M√¥ t·∫£ ti·∫øng Vi·ªát:**
[Gi·∫£i th√≠ch prompt b·∫±ng ti·∫øng Vi·ªát ƒë·ªÉ ng∆∞·ªùi d√πng hi·ªÉu]

**Negative Prompt:**
[Nh·ªØng g√¨ c·∫ßn tr√°nh b·∫±ng ti·∫øng Anh]

---`;
        }
    }

    toggleDefaultPromptViewer() {
        if (this.defaultPromptViewer.style.display === 'none') {
            this.defaultPromptContent.textContent = this.getDefaultSystemPrompt();
            this.defaultPromptViewer.style.display = 'block';
            this.showDefaultPromptBtn.textContent = 'üîº ·∫®n Prompt M·∫∑c ƒê·ªãnh';
        } else {
            this.defaultPromptViewer.style.display = 'none';
            this.showDefaultPromptBtn.textContent = 'üìù Xem Prompt M·∫∑c ƒê·ªãnh';
        }
    }

    useDefaultPrompt() {
        this.customSystemPromptInput.value = '';
        this.saveSettings();
        alert('‚úÖ ƒê√£ reset v·ªÅ system prompt m·∫∑c ƒë·ªãnh!');
    }

    editDefaultPrompt() {
        const defaultPrompt = this.getDefaultSystemPrompt();
        this.customSystemPromptInput.value = defaultPrompt;
        this.saveSettings();
        
        // Scroll to the textarea
        this.customSystemPromptInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
        this.customSystemPromptInput.focus();
        
        alert('üìù Prompt m·∫∑c ƒë·ªãnh ƒë√£ ƒë∆∞·ª£c t·∫£i v√†o √¥ ch·ªânh s·ª≠a. B·∫°n c√≥ th·ªÉ t√πy ch·ªânh theo √Ω mu·ªën!');
    }

    resetAllSettings() {
        if (confirm('‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën reset t·∫•t c·∫£ c√†i ƒë·∫∑t v·ªÅ m·∫∑c ƒë·ªãnh? (API key s·∫Ω ƒë∆∞·ª£c gi·ªØ l·∫°i) H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!')) {
            // Clear localStorage (except API key)
            localStorage.removeItem('gemini_model');
            localStorage.removeItem('custom_system_prompt');
            
            // Reset form values (keep API key)
            this.modelSelect.value = 'gemini-1.5-flash';
            this.customSystemPromptInput.value = '';
            this.artStyleSelect.value = 'realistic';
            this.detailLevelSelect.value = 'detailed';
            this.aspectRatioSelect.value = '1:1';
            this.numberOfPromptsSelect.value = '3';
            this.negativePromptInput.value = '';
            this.guidanceScaleInput.value = '7';
            this.guidanceValueSpan.textContent = '7';
            this.seedInput.value = '';
            
            // Reset to image tab
            this.switchContentType('image');
            
            // Hide default prompt viewer
            this.defaultPromptViewer.style.display = 'none';
            this.showDefaultPromptBtn.textContent = 'üìù Xem Prompt M·∫∑c ƒê·ªãnh';
            
            alert('üîÑ ƒê√£ reset t·∫•t c·∫£ c√†i ƒë·∫∑t v·ªÅ m·∫∑c ƒë·ªãnh! (API key ƒë∆∞·ª£c gi·ªØ l·∫°i)');
        }
    }

    validateInputs() {
        const apiKey = this.apiKeyInput.value.trim();
        const prompt = this.promptInput.value.trim();

        if (!apiKey) {
            throw new Error('Vui l√≤ng nh·∫≠p API key Gemini');
        }

        if (!prompt) {
            throw new Error('Vui l√≤ng nh·∫≠p √Ω t∆∞·ªüng h√¨nh ·∫£nh');
        }

        if (prompt.length < 5) {
            throw new Error('√ù t∆∞·ªüng qu√° ng·∫Øn. Vui l√≤ng m√¥ t·∫£ chi ti·∫øt h∆°n');
        }

        return { apiKey, prompt };
    }

    getPromptGenerationConfig() {
        const artStyle = this.artStyleSelect.value;
        const detailLevel = this.detailLevelSelect.value;
        const aspectRatio = this.aspectRatioSelect.value;
        const numberOfPrompts = parseInt(this.numberOfPromptsSelect.value);
        const contentType = this.currentContentType;
        
        return {
            artStyle,
            detailLevel,
            aspectRatio,
            numberOfPrompts,
            contentType
        };
    }

    buildSystemPrompt() {
        const customPrompt = this.customSystemPromptInput.value.trim();
        
        if (customPrompt) {
            return customPrompt;
        }

        return this.getDefaultSystemPrompt();
    }

    showError(message) {
        this.errorMessage.textContent = message;
        this.errorMessage.style.display = 'block';
        this.loadingMessage.style.display = 'none';
    }

    hideError() {
        this.errorMessage.style.display = 'none';
    }

    showLoading() {
        this.loadingMessage.style.display = 'block';
        this.generateBtn.disabled = true;
        this.btnText.style.display = 'none';
        this.btnLoading.style.display = 'flex';
    }

    hideLoading() {
        this.loadingMessage.style.display = 'none';
        this.generateBtn.disabled = false;
        this.btnText.style.display = 'inline';
        this.btnLoading.style.display = 'none';
    }

    async generatePrompts() {
        try {
            this.hideError();
            
            // Validate inputs
            const { apiKey, prompt } = this.validateInputs();
            
            // Initialize AI client
            this.ai = new GoogleGenAI({ apiKey });
            
            // Show loading
            this.showLoading();
            
            // Get configuration
            const config = this.getPromptGenerationConfig();
            
            // Build the detailed prompt for Gemini
            const systemPrompt = this.buildSystemPrompt();
            const userPrompt = this.buildUserPrompt(prompt, config);
            
            // Generate prompts using Gemini
            const selectedModel = this.modelSelect.value;
            const response = await this.ai.models.generateContent({
                model: selectedModel,
                contents: [
                    { role: 'user', parts: [{ text: systemPrompt + '\n\n' + userPrompt }] }
                ],
                config: {
                    temperature: 0.8,
                    maxOutputTokens: 2048
                }
            });

            // Process results
            this.displayPromptResults(response, prompt, config);
            
        } catch (error) {
            console.error('Error generating prompts:', error);
            this.showError(this.getErrorMessage(error));
        } finally {
            this.hideLoading();
        }
    }

    buildUserPrompt(userIdea, config) {
        const styleMap = {
            'realistic': 'realistic, photorealistic style',
            'photography': 'professional photography with technical camera terms and lighting',
            'cinematic': 'cinematic style with dramatic camera angles and movie-like composition',
            'anime': 'anime style, manga style, Japanese animation',
            'cartoon': 'cartoon style, animated, stylized illustration',
            'oil-painting': 'oil painting, classical art, traditional painting techniques',
            'watercolor': 'watercolor painting, soft colors, artistic brushwork',
            'digital-art': 'digital art, concept art, modern digital techniques',
            'fantasy': 'fantasy art, magical elements, mystical atmosphere',
            'cyberpunk': 'cyberpunk style, neon lights, futuristic, sci-fi aesthetic',
            'vintage': 'vintage style, retro aesthetic, nostalgic feeling',
            'minimalist': 'minimalist, simple, clean composition, focused elements',
            'commercial': 'commercial photography style, marketing-ready, professional presentation',
            'technical': 'technical illustration, precise details, professional specifications'
        };

        const detailMap = {
            'basic': 'simple description',
            'detailed': 'detailed description with lighting and composition',
            'very-detailed': 'very detailed with specific camera angles, lighting, and artistic techniques',
            'ultra-detailed': 'ultra detailed with professional photography terms, specific art techniques, and quality modifiers'
        };

        const contentTypeText = config.contentType === 'video' ? 'video' : 'h√¨nh ·∫£nh';
        
        return `√ù t∆∞·ªüng g·ªëc: "${userIdea}"
Lo·∫°i n·ªôi dung: ${contentTypeText}
Phong c√°ch: ${styleMap[config.artStyle]}
M·ª©c ƒë·ªô chi ti·∫øt: ${detailMap[config.detailLevel]}
T·ª∑ l·ªá khung h√¨nh: ${config.aspectRatio}
S·ªë l∆∞·ª£ng prompt c·∫ßn t·∫°o: ${config.numberOfPrompts}

H√£y t·∫°o ${config.numberOfPrompts} prompt kh√°c nhau cho √Ω t∆∞·ªüng n√†y, m·ªói prompt c√≥ c√°ch di·ªÖn ƒë·∫°t kh√°c nhau nh∆∞ng c√πng phong c√°ch "${config.artStyle}".`;
    }

    getErrorMessage(error) {
        if (error.message.includes('API key') || error.message.includes('401')) {
            return 'API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i API key c·ªßa b·∫°n.';
        }
        
        if (error.message.includes('quota') || error.message.includes('429')) {
            return 'B·∫°n ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng API. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
        
        if (error.message.includes('safety')) {
            return 'N·ªôi dung c·ªßa b·∫°n vi ph·∫°m ch√≠nh s√°ch an to√†n. Vui l√≤ng th·ª≠ m√¥ t·∫£ kh√°c.';
        }
        
        if (error.message.includes('network') || error.message.includes('fetch')) {
            return 'L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.';
        }
        
        return error.message || 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i.';
    }

    displayPromptResults(response, originalIdea, config) {
        // Clear previous results
        this.promptResults.innerHTML = '';
        
        if (!response.text) {
            this.showError('Kh√¥ng th·ªÉ t·∫°o m√¥ t·∫£. Vui l√≤ng th·ª≠ l·∫°i.');
            return;
        }

        // Parse the response to extract individual prompts
        const generatedText = response.text;
        const prompts = this.parseGeneratedPrompts(generatedText);
        
        if (prompts.length === 0) {
            this.showError('Kh√¥ng th·ªÉ ph√¢n t√≠ch k·∫øt qu·∫£. Vui l√≤ng th·ª≠ l·∫°i.');
            return;
        }

        prompts.forEach((promptData, index) => {
            this.createPromptElement(promptData, index, originalIdea, config);
        });
    }

    parseGeneratedPrompts(text) {
        const prompts = [];
        const sections = text.split('---').filter(section => section.trim());
        
        sections.forEach((section, index) => {
            const lines = section.trim().split('\n');
            let promptText = '';
            let vietnameseDescription = '';
            let negativePrompt = '';
            let currentSection = '';
            
            lines.forEach(line => {
                line = line.trim();
                if (line.startsWith('**Prompt')) {
                    currentSection = 'prompt';
                } else if (line.startsWith('**M√¥ t·∫£ ti·∫øng Vi·ªát')) {
                    currentSection = 'vietnamese';
                } else if (line.startsWith('**Negative Prompt')) {
                    currentSection = 'negative';
                } else if (line && !line.startsWith('**')) {
                    if (currentSection === 'prompt') {
                        promptText += line + ' ';
                    } else if (currentSection === 'vietnamese') {
                        vietnameseDescription += line + ' ';
                    } else if (currentSection === 'negative') {
                        negativePrompt += line + ' ';
                    }
                }
            });
            
            if (promptText.trim()) {
                prompts.push({
                    prompt: promptText.trim(),
                    vietnameseDescription: vietnameseDescription.trim(),
                    negativePrompt: negativePrompt.trim(),
                    index: index + 1
                });
            }
        });
        
        return prompts;
    }

    createPromptElement(promptData, index, originalIdea, config) {
        const promptItem = document.createElement('div');
        promptItem.className = 'prompt-item';
        
        const styleMap = {
            'realistic': 'Th·ª±c t·∫ø',
            'anime': 'Anime/Manga',
            'cartoon': 'Cartoon',
            'oil-painting': 'S∆°n d·∫ßu',
            'watercolor': 'M√†u n∆∞·ªõc',
            'digital-art': 'Digital Art',
            'fantasy': 'Fantasy',
            'cyberpunk': 'Cyberpunk',
            'minimalist': 'T·ªëi gi·∫£n',
            'vintage': 'Vintage'
        };
        
        promptItem.innerHTML = `
            <div class="prompt-header">
                <h3 class="prompt-title">Prompt ${promptData.index}</h3>
                <span class="prompt-style">${styleMap[config.artStyle]}</span>
            </div>
            
            ${promptData.vietnameseDescription ? `
                <div class="vietnamese-description">
                    <h4>üìù M√¥ t·∫£ ti·∫øng Vi·ªát:</h4>
                    <p>${promptData.vietnameseDescription}</p>
                </div>
            ` : ''}
            
            <div class="prompt-section">
                <h4>üé® Prompt (English):</h4>
                <div class="prompt-content">${promptData.prompt}</div>
            </div>
            
            ${promptData.negativePrompt ? `
                <div class="prompt-section">
                    <h4>üö´ Negative Prompt:</h4>
                    <div class="prompt-content negative-prompt" style="border-color: #dc3545; background: #fff5f5;">
                        ${promptData.negativePrompt}
                    </div>
                </div>
            ` : ''}
            
            <div class="prompt-meta">
                <span>üí° √ù t∆∞·ªüng g·ªëc: "${originalIdea}"</span>
                <span>üìê T·ª∑ l·ªá: ${config.aspectRatio}</span>
                <span>üé≠ Phong c√°ch: ${styleMap[config.artStyle]}</span>
            </div>
            
            <div class="prompt-actions">
                <button class="copy-prompt-btn" data-prompt-index="${index}">
                    üìã Sao ch√©p Prompt
                </button>
                ${promptData.negativePrompt ? `
                    <button class="copy-negative-btn" data-prompt-index="${index}">
                        üö´ Sao ch√©p Negative
                    </button>
                ` : ''}
                <button class="copy-all-btn" data-prompt-index="${index}">
                    üìÑ Sao ch√©p T·∫•t c·∫£
                </button>
            </div>
        `;
        
        this.promptResults.appendChild(promptItem);
        
        // Add event listeners for this prompt item
        const copyBtn = promptItem.querySelector('.copy-prompt-btn');
        const copyNegativeBtn = promptItem.querySelector('.copy-negative-btn');
        const copyAllBtn = promptItem.querySelector('.copy-all-btn');
        
        copyBtn.addEventListener('click', () => this.copyPrompt(promptData.prompt));
        
        if (copyNegativeBtn) {
            copyNegativeBtn.addEventListener('click', () => this.copyPrompt(promptData.negativePrompt));
        }
        
        copyAllBtn.addEventListener('click', () => this.copyAllPrompts(promptData));
    }

    async copyPrompt(promptText) {
        try {
            if (!promptText || promptText.trim() === '') {
                this.showError('Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ sao ch√©p.');
                return;
            }
            
            await navigator.clipboard.writeText(promptText.trim());
            this.showSuccessMessage('ƒê√£ sao ch√©p v√†o clipboard! üìã');
        } catch (error) {
            console.error('Copy error:', error);
            // Fallback method
            this.fallbackCopy(promptText);
        }
    }

    async copyAllPrompts(promptData) {
        try {
            let fullText = `Prompt:\n${promptData.prompt}`;
            
            if (promptData.negativePrompt) {
                fullText += `\n\nNegative Prompt:\n${promptData.negativePrompt}`;
            }
            
            await navigator.clipboard.writeText(fullText);
            this.showSuccessMessage('ƒê√£ sao ch√©p t·∫•t c·∫£ prompt v√†o clipboard! üìÑ');
        } catch (error) {
            console.error('Copy all error:', error);
            this.fallbackCopy(fullText);
        }
    }

    fallbackCopy(text) {
        try {
            // Create a temporary textarea
            const textarea = document.createElement('textarea');
            textarea.value = text;
            textarea.style.position = 'fixed';
            textarea.style.opacity = '0';
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);
            
            this.showSuccessMessage('ƒê√£ sao ch√©p v√†o clipboard! üìã');
        } catch (fallbackError) {
            console.error('Fallback copy error:', fallbackError);
            this.showError('Kh√¥ng th·ªÉ sao ch√©p. Vui l√≤ng ch·ªçn v√† copy th·ªß c√¥ng.');
        }
    }

    showSuccessMessage(message) {
        // Remove existing success messages
        const existingSuccess = document.querySelector('.success-message');
        if (existingSuccess) {
            existingSuccess.remove();
        }

        const successDiv = document.createElement('div');
        successDiv.className = 'success-message';
        successDiv.textContent = message;
        
        this.errorMessage.parentNode.insertBefore(successDiv, this.errorMessage);
        
        // Auto hide after 3 seconds
        setTimeout(() => {
            if (successDiv.parentNode) {
                successDiv.remove();
            }
        }, 3000);
    }
}

// Initialize the application
window.promptApp = new PromptGenerator();

// Add some example prompts
const examplePrompts = [
    "M·ªôt con m√®o d·ªÖ th∆∞∆°ng ƒëang ng·ªìi tr√™n c·ªè xanh d∆∞·ªõi √°nh n·∫Øng m·∫∑t tr·ªùi, phong c√°ch anime",
    "Phong c·∫£nh n√∫i non h√πng vƒ© v·ªõi th√°c n∆∞·ªõc v√† c·∫ßu v·ªìng, phong c√°ch fantasy",
    "Robot th√¢n thi·ªán ƒëang c·∫ßm v√°n tr∆∞·ª£t m√†u ƒë·ªè, phong c√°ch vector t·ªëi gi·∫£n",
    "Th√†nh ph·ªë t∆∞∆°ng lai v·ªõi xe bay v√† t√≤a nh√† cao ch·ªçc tr·ªùi, ban ƒë√™m v·ªõi √°nh ƒë√®n neon",
    "Khu v∆∞·ªùn hoa anh ƒë√†o n·ªü r·ªô v·ªõi con ƒë∆∞·ªùng ƒë√° nh·ªè, phong c√°ch Nh·∫≠t B·∫£n truy·ªÅn th·ªëng"
];

// Add example prompt functionality
document.addEventListener('DOMContentLoaded', () => {
    const promptInput = document.getElementById('prompt');
    
    // Add placeholder with rotating examples
    let exampleIndex = 0;
    setInterval(() => {
        if (!promptInput.value && document.activeElement !== promptInput) {
            promptInput.placeholder = examplePrompts[exampleIndex];
            exampleIndex = (exampleIndex + 1) % examplePrompts.length;
        }
    }, 3000);
});