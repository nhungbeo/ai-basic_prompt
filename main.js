import { GoogleGenerativeAI } from '@google/generative-ai';

// UI State Manager for tab switching and state management
class UIStateManager {
    constructor() {
        this.currentTab = 'image';
        this.setupTabs();
    }

    setupTabs() {
        this.navTabs = document.querySelectorAll('.nav-tab');
        this.tabContents = document.querySelectorAll('.tab-content');
        this.apiKeyGlobal = document.getElementById('apiKeyGlobal');
        
        // Bind tab click events
        this.navTabs.forEach(tab => {
            tab.addEventListener('click', (e) => {
                const tabType = e.target.dataset.tab;
                this.switchTab(tabType);
            });
        });

        // Initially hide API key if already saved
        this.checkApiKeyVisibility();
    }

    switchTab(tabType) {
        if (tabType === this.currentTab) return;
        
        this.currentTab = tabType;
        
        // Update nav tabs
        this.navTabs.forEach(tab => {
            tab.classList.toggle('active', tab.dataset.tab === tabType);
        });
        
        // Update tab contents with animation
        this.tabContents.forEach(content => {
            const isActive = content.id === `${tabType}Tab`;
            if (isActive) {
                content.classList.add('active');
                content.style.display = 'block';
            } else {
                content.classList.remove('active');
                // Delay hiding to allow animation
                setTimeout(() => {
                    if (!content.classList.contains('active')) {
                        content.style.display = 'none';
                    }
                }, 100);
            }
        });
    }

    checkApiKeyVisibility() {
        const savedApiKey = localStorage.getItem('gemini_api_key');
        if (savedApiKey && savedApiKey.trim()) {
            this.apiKeyGlobal.style.display = 'none';
        }
    }

    showApiKeySection() {
        this.apiKeyGlobal.style.display = 'block';
    }

    hideApiKeySection() {
        this.apiKeyGlobal.style.display = 'none';
    }
}

// History Manager for localStorage integration
class HistoryManager {
    constructor() {
        this.maxHistoryItems = 50;
        this.setupHistoryUI();
    }

    setupHistoryUI() {
        this.historyBtn = document.getElementById('historyBtn');
        this.historySidebar = document.getElementById('historySidebar');
        this.historyToggle = document.getElementById('historyToggle');
        this.historyContent = document.getElementById('historyContent');
        
        // Bind events
        this.historyBtn.addEventListener('click', () => this.showHistory());
        this.historyToggle.addEventListener('click', () => this.hideHistory());
        
        // Load and display history
        this.loadHistory();
    }

    showHistory() {
        this.historySidebar.classList.add('active');
    }

    hideHistory() {
        this.historySidebar.classList.remove('active');
    }

    addToHistory(type, prompt, results) {
        const historyItem = {
            id: Date.now(),
            type: type, // 'image' or 'video'
            prompt: prompt,
            results: results,
            timestamp: new Date().toISOString()
        };

        let history = this.getHistory();
        history.unshift(historyItem);
        
        // Keep only maxHistoryItems
        if (history.length > this.maxHistoryItems) {
            history = history.slice(0, this.maxHistoryItems);
        }
        
        localStorage.setItem('prompt_history', JSON.stringify(history));
        this.renderHistory();
    }

    getHistory() {
        try {
            const history = localStorage.getItem('prompt_history');
            return history ? JSON.parse(history) : [];
        } catch (error) {
            console.error('Error loading history:', error);
            return [];
        }
    }

    loadHistory() {
        this.renderHistory();
    }

    renderHistory() {
        const history = this.getHistory();
        
        if (history.length === 0) {
            this.historyContent.innerHTML = '<p class="history-empty">Ch∆∞a c√≥ l·ªãch s·ª≠ n√†o</p>';
            return;
        }

        const historyHTML = history.map(item => {
            const date = new Date(item.timestamp).toLocaleDateString('vi-VN');
            const time = new Date(item.timestamp).toLocaleTimeString('vi-VN', {
                hour: '2-digit',
                minute: '2-digit'
            });
            const icon = item.type === 'image' ? 'üñºÔ∏è' : 'üé¨';
            const truncatedPrompt = item.prompt.length > 100 ? 
                item.prompt.substring(0, 100) + '...' : item.prompt;
            
            return `
                <div class="history-item" data-id="${item.id}">
                    <div class="history-header">
                        <span class="history-icon">${icon}</span>
                        <span class="history-date">${date} ${time}</span>
                    </div>
                    <div class="history-prompt">${truncatedPrompt}</div>
                    <div class="history-actions">
                        <button class="history-reuse" onclick="historyManager.reusePrompt('${item.id}')">
                            üîÑ S·ª≠ d·ª•ng l·∫°i
                        </button>
                        <button class="history-delete" onclick="historyManager.deleteItem('${item.id}')">
                            üóëÔ∏è X√≥a
                        </button>
                    </div>
                </div>
            `;
        }).join('');
        
        this.historyContent.innerHTML = historyHTML;
    }

    reusePrompt(itemId) {
        const history = this.getHistory();
        const item = history.find(h => h.id == itemId);
        
        if (item) {
            // Switch to appropriate tab
            window.uiStateManager.switchTab(item.type);
            
            // Fill the prompt
            const promptInput = item.type === 'image' ? 
                document.getElementById('imagePrompt') : 
                document.getElementById('videoPrompt');
            
            if (promptInput) {
                promptInput.value = item.prompt;
            }
            
            // Hide history
            this.hideHistory();
        }
    }

    deleteItem(itemId) {
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a m·ª•c n√†y kh·ªèi l·ªãch s·ª≠?')) {
            let history = this.getHistory();
            history = history.filter(item => item.id != itemId);
            localStorage.setItem('prompt_history', JSON.stringify(history));
            this.renderHistory();
        }
    }

    clearHistory() {
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠?')) {
            localStorage.removeItem('prompt_history');
            this.renderHistory();
        }
    }
}

// Main Prompt Generator Class
class PromptGenerator {
    constructor() {
        this.ai = null;
        this.currentContentType = 'image';
        this.initializeElements();
        this.bindEvents();
    }

    initializeElements() {
        // Global elements
        this.apiKeyInput = document.getElementById('apiKey');
        this.apiKeySave = document.getElementById('apiKeySave');
        
        // Advanced API key elements
        this.advancedApiKeyInput = document.getElementById('advancedApiKey');
        this.showApiKeyBtn = document.getElementById('showApiKey');
        this.saveAdvancedApiKeyBtn = document.getElementById('saveAdvancedApiKey');
        this.clearApiKeyBtn = document.getElementById('clearApiKey');
        
        // Video API key elements
        this.videoAdvancedApiKeyInput = document.getElementById('videoAdvancedApiKey');
        this.showVideoApiKeyBtn = document.getElementById('showVideoApiKey');
        this.saveVideoApiKeyBtn = document.getElementById('saveVideoApiKey');
        this.clearVideoApiKeyBtn = document.getElementById('clearVideoApiKey');
        
        // Image tab elements
        this.imagePromptInput = document.getElementById('imagePrompt');
        this.imageStyleOptions = document.querySelectorAll('#imageTab .style-option');
        this.generateImageBtn = document.getElementById('generateImageBtn');
        this.imageResults = document.getElementById('imageResults');
        
        // Video tab elements
        this.videoPromptInput = document.getElementById('videoPrompt');
        this.videoStyleOptions = document.querySelectorAll('#videoTab .style-option');
        this.templateChips = document.querySelectorAll('.template-chip');
        this.generateVideoBtn = document.getElementById('generateVideoBtn');
        this.videoResults = document.getElementById('videoResults');
        
        // Shared config elements
        this.artStyleSelect = document.getElementById('artStyle');
        this.videoStyleInput = document.getElementById('videoStyle');
        this.detailLevelSelect = document.getElementById('detailLevel');
        this.aspectRatioSelect = document.getElementById('aspectRatio');
        this.numberOfPromptsSelect = document.getElementById('numberOfPrompts');
        this.modelSelect = document.getElementById('modelSelect');
        this.customSystemPromptInput = document.getElementById('customSystemPrompt');
        this.showDefaultPromptBtn = document.getElementById('showDefaultPromptBtn');
        this.useDefaultPromptBtn = document.getElementById('useDefaultPromptBtn');
        this.defaultPromptViewer = document.getElementById('defaultPromptViewer');
        this.defaultPromptContent = document.getElementById('defaultPromptContent');
        this.editDefaultPromptBtn = document.getElementById('editDefaultPromptBtn');
        this.resetSettingsBtn = document.getElementById('resetSettingsBtn');
        this.negativePromptInput = document.getElementById('negativePrompt');
        this.guidanceScaleInput = document.getElementById('guidanceScale');
        this.guidanceValueSpan = document.getElementById('guidanceValue');
        this.seedInput = document.getElementById('seed');
        
        // Video specific config elements
        this.videoModelSelect = document.getElementById('videoModelSelect');
        this.videoCustomSystemPromptInput = document.getElementById('videoCustomSystemPrompt');
        this.showVideoDefaultPromptBtn = document.getElementById('showVideoDefaultPromptBtn');
        this.useVideoDefaultPromptBtn = document.getElementById('useVideoDefaultPromptBtn');
        this.editVideoDefaultPromptBtn = document.getElementById('editVideoDefaultPromptBtn');
        this.videoDefaultPromptViewer = document.getElementById('videoDefaultPromptViewer');
        this.videoDefaultPromptContent = document.getElementById('videoDefaultPromptContent');
        this.editVideoPromptBtn = document.getElementById('editVideoPromptBtn');
        
        // Video specific elements
        this.videoDetailLevelSelect = document.getElementById('videoDetailLevel');
        this.videoAspectRatioSelect = document.getElementById('videoAspectRatio');
        this.videoLengthSelect = document.getElementById('videoLength');
        this.numberOfVideoPromptsSelect = document.getElementById('numberOfVideoPrompts');
        
        // Status elements
        this.errorMessage = document.getElementById('errorMessage');
        this.loadingMessage = document.getElementById('loadingMessage');
    }

    bindEvents() {
        // API Key management
        this.apiKeySave.addEventListener('click', () => this.saveApiKey());
        this.apiKeyInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                this.saveApiKey();
            }
        });
        
        // Advanced API Key management
        this.bindAdvancedApiKeyEvents();
        
        // Image tab events
        this.generateImageBtn.addEventListener('click', () => this.generatePrompts('image'));
        this.imagePromptInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && e.ctrlKey) {
                this.generatePrompts('image');
            }
        });
        
        // Video tab events
        this.generateVideoBtn.addEventListener('click', () => this.generatePrompts('video'));
        this.videoPromptInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && e.ctrlKey) {
                this.generatePrompts('video');
            }
        });
        
        // Style selection events
        this.bindStyleSelectionEvents();
        this.bindTemplateEvents();
        
        // Settings events
        this.guidanceScaleInput?.addEventListener('input', (e) => {
            if (this.guidanceValueSpan) {
                this.guidanceValueSpan.textContent = e.target.value;
            }
        });
        
        // Load saved settings
        this.loadSavedSettings();
        this.modelSelect?.addEventListener('change', () => this.saveSettings());
        this.customSystemPromptInput?.addEventListener('change', () => this.saveSettings());
        this.videoModelSelect?.addEventListener('change', () => this.saveSettings());
        this.videoCustomSystemPromptInput?.addEventListener('change', () => this.saveSettings());
        
        // Prompt control buttons
        this.showDefaultPromptBtn?.addEventListener('click', () => this.toggleDefaultPromptViewer());
        this.useDefaultPromptBtn?.addEventListener('click', () => this.useDefaultPrompt());
        this.editDefaultPromptBtn?.addEventListener('click', () => this.editDefaultPrompt());
        this.resetSettingsBtn?.addEventListener('click', () => this.resetAllSettings());
        
        // Video prompt control buttons
        this.showVideoDefaultPromptBtn?.addEventListener('click', () => this.toggleVideoDefaultPromptViewer());
        this.useVideoDefaultPromptBtn?.addEventListener('click', () => this.useVideoDefaultPrompt());
        this.editVideoDefaultPromptBtn?.addEventListener('click', () => this.editVideoDefaultPrompt());
        this.editVideoPromptBtn?.addEventListener('click', () => this.editVideoDefaultPrompt());
    }

    bindStyleSelectionEvents() {
        // Image style selection
        this.imageStyleOptions.forEach(option => {
            option.addEventListener('click', () => {
                this.selectStyle(option, 'image');
            });
        });
        
        // Video style selection
        this.videoStyleOptions.forEach(option => {
            option.addEventListener('click', () => {
                this.selectStyle(option, 'video');
            });
        });
    }
    
    selectStyle(selectedOption, type) {
        const container = selectedOption.closest('.style-selection');
        const options = container.querySelectorAll('.style-option');
        const styleValue = selectedOption.dataset.style;
        
        // Update visual selection
        options.forEach(opt => opt.classList.remove('active'));
        selectedOption.classList.add('active');
        
        // Update hidden input
        if (type === 'image') {
            this.artStyleSelect.value = styleValue;
        } else {
            this.videoStyleInput.value = styleValue;
        }
    }
    
    bindAdvancedApiKeyEvents() {
        // Image tab advanced API key
        this.showApiKeyBtn?.addEventListener('click', () => this.toggleApiKeyVisibility('advancedApiKey'));
        this.saveAdvancedApiKeyBtn?.addEventListener('click', () => this.saveAdvancedApiKey('advancedApiKey'));
        this.clearApiKeyBtn?.addEventListener('click', () => this.clearAdvancedApiKey('advancedApiKey'));
        
        // Video tab advanced API key
        this.showVideoApiKeyBtn?.addEventListener('click', () => this.toggleApiKeyVisibility('videoAdvancedApiKey'));
        this.saveVideoApiKeyBtn?.addEventListener('click', () => this.saveAdvancedApiKey('videoAdvancedApiKey'));
        this.clearVideoApiKeyBtn?.addEventListener('click', () => this.clearAdvancedApiKey('videoAdvancedApiKey'));
        
        // Load current API key to advanced inputs
        this.loadApiKeyToAdvanced();
    }
    
    loadApiKeyToAdvanced() {
        const savedApiKey = localStorage.getItem('gemini_api_key');
        if (savedApiKey) {
            if (this.advancedApiKeyInput) {
                this.advancedApiKeyInput.value = savedApiKey;
                this.advancedApiKeyInput.type = 'password';
            }
            if (this.videoAdvancedApiKeyInput) {
                this.videoAdvancedApiKeyInput.value = savedApiKey;
                this.videoAdvancedApiKeyInput.type = 'password';
            }
        }
    }
    
    toggleApiKeyVisibility(inputId) {
        const input = document.getElementById(inputId);
        if (!input) return;
        
        if (input.type === 'password') {
            input.type = 'text';
            // Update button text
            const showBtn = inputId === 'advancedApiKey' ? this.showApiKeyBtn : this.showVideoApiKeyBtn;
            showBtn.innerHTML = 'üôà ·∫®n';
        } else {
            input.type = 'password';
            const showBtn = inputId === 'advancedApiKey' ? this.showApiKeyBtn : this.showVideoApiKeyBtn;
            showBtn.innerHTML = 'üëÅÔ∏è Hi·ªán';
        }
    }
    
    saveAdvancedApiKey(inputId) {
        const input = document.getElementById(inputId);
        if (!input) return;
        
        const apiKey = input.value.trim();
        if (apiKey) {
            localStorage.setItem('gemini_api_key', apiKey);
            // Sync to other inputs
            this.syncApiKeyInputs(apiKey);
            this.showSuccessMessage('API key ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng! üîë');
            window.uiStateManager.hideApiKeySection();
        } else {
            this.showError('Vui l√≤ng nh·∫≠p API key h·ª£p l·ªá');
        }
    }
    
    clearAdvancedApiKey(inputId) {
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a API key? B·∫°n s·∫Ω c·∫ßn nh·∫≠p l·∫°i ƒë·ªÉ s·ª≠ d·ª•ng ·ª©ng d·ª•ng.')) {
            localStorage.removeItem('gemini_api_key');
            // Clear all API key inputs
            this.apiKeyInput.value = '';
            if (this.advancedApiKeyInput) this.advancedApiKeyInput.value = '';
            if (this.videoAdvancedApiKeyInput) this.videoAdvancedApiKeyInput.value = '';
            
            this.showSuccessMessage('API key ƒë√£ ƒë∆∞·ª£c x√≥a! üóëÔ∏è');
            window.uiStateManager.showApiKeySection();
        }
    }
    
    syncApiKeyInputs(apiKey) {
        // Sync API key to all inputs
        this.apiKeyInput.value = apiKey;
        if (this.advancedApiKeyInput) this.advancedApiKeyInput.value = apiKey;
        if (this.videoAdvancedApiKeyInput) this.videoAdvancedApiKeyInput.value = apiKey;
    }
    
    toggleVideoDefaultPromptViewer() {
        if (!this.videoDefaultPromptViewer || !this.videoDefaultPromptContent || !this.showVideoDefaultPromptBtn) {
            this.showError('Video default prompt viewer elements not found');
            return;
        }

        if (this.videoDefaultPromptViewer.style.display === 'none') {
            this.videoDefaultPromptContent.textContent = this.getDefaultSystemPrompt('video');
            this.videoDefaultPromptViewer.style.display = 'block';
            this.showVideoDefaultPromptBtn.textContent = 'üîº ·∫®n Video Prompt M·∫∑c ƒê·ªãnh';
        } else {
            this.videoDefaultPromptViewer.style.display = 'none';
            this.showVideoDefaultPromptBtn.textContent = 'üìù Xem Prompt M·∫∑c ƒê·ªãnh';
        }
    }
    
    useVideoDefaultPrompt() {
        if (this.videoCustomSystemPromptInput) {
            this.videoCustomSystemPromptInput.value = '';
            this.saveSettings();
            this.showSuccessMessage('‚úÖ ƒê√£ reset v·ªÅ system prompt m·∫∑c ƒë·ªãnh cho video!');
        }
    }
    
    editVideoDefaultPrompt() {
        if (this.videoCustomSystemPromptInput) {
            const defaultPrompt = this.getDefaultSystemPrompt('video');
            this.videoCustomSystemPromptInput.value = defaultPrompt;
            this.saveSettings();
            
            // Scroll to the textarea
            this.videoCustomSystemPromptInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
            this.videoCustomSystemPromptInput.focus();
            
            this.showSuccessMessage('üìù Video prompt m·∫∑c ƒë·ªãnh ƒë√£ ƒë∆∞·ª£c t·∫£i v√†o √¥ ch·ªânh s·ª≠a. B·∫°n c√≥ th·ªÉ t√πy ch·ªânh theo √Ω mu·ªën!');
        }
    }

    bindTemplateEvents() {
        // Video template chips
        this.templateChips.forEach(chip => {
            chip.addEventListener('click', () => this.handleTemplateClick(chip));
        });
    }

    loadSavedSettings() {
        const savedApiKey = localStorage.getItem('gemini_api_key');
        if (savedApiKey) {
            this.apiKeyInput.value = savedApiKey;
        }

        const savedModel = localStorage.getItem('gemini_model');
        if (savedModel && this.modelSelect) {
            this.modelSelect.value = savedModel;
        }

        const savedSystemPrompt = localStorage.getItem('custom_system_prompt');
        if (savedSystemPrompt && this.customSystemPromptInput) {
            this.customSystemPromptInput.value = savedSystemPrompt;
        }
        
        const savedVideoModel = localStorage.getItem('video_gemini_model');
        if (savedVideoModel && this.videoModelSelect) {
            this.videoModelSelect.value = savedVideoModel;
        }
        
        const savedVideoSystemPrompt = localStorage.getItem('video_custom_system_prompt');
        if (savedVideoSystemPrompt && this.videoCustomSystemPromptInput) {
            this.videoCustomSystemPromptInput.value = savedVideoSystemPrompt;
        }
    }

    saveSettings() {
        if (this.modelSelect) {
            localStorage.setItem('gemini_model', this.modelSelect.value);
        }
        if (this.customSystemPromptInput) {
            localStorage.setItem('custom_system_prompt', this.customSystemPromptInput.value.trim());
        }
        if (this.videoModelSelect) {
            localStorage.setItem('video_gemini_model', this.videoModelSelect.value);
        }
        if (this.videoCustomSystemPromptInput) {
            localStorage.setItem('video_custom_system_prompt', this.videoCustomSystemPromptInput.value.trim());
        }
    }
    
    saveApiKey() {
        const apiKey = this.apiKeyInput.value.trim();
        if (apiKey) {
            localStorage.setItem('gemini_api_key', apiKey);
            // Sync to advanced inputs
            this.syncApiKeyInputs(apiKey);
            window.uiStateManager.hideApiKeySection();
            this.showSuccessMessage('API key ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng! üîë');
        } else {
            this.showError('Vui l√≤ng nh·∫≠p API key h·ª£p l·ªá');
        }
    }

    // This method is no longer needed as tab switching is handled by UIStateManager

    getDefaultSystemPrompt(contentType = 'image') {
        if (contentType === 'video') {
            return `You are an expert AI video prompt engineer.
Your role is to assist users in generating **structured, cinematic-quality prompts** for AI video generation tools (e.g., Runway Gen-4, Pika, Sora).

### Core Responsibilities:
1. Always guide the user to build prompts using **structured templates** that include:
   - **Nh√¢n v·∫≠t (Character/Subject)**: ngo·∫°i h√¨nh, h√†nh ƒë·ªông, c·∫£m x√∫c
   - **G√≥c quay (Camera angle/shot type)**: wide, close-up, tracking, dolly, drone‚Ä¶
   - **B·ªëi c·∫£nh (Scene/Background)**: ƒë·ªãa ƒëi·ªÉm, m√¥i tr∆∞·ªùng, chi ti·∫øt ph·ª• tr·ª£
   - **√Ånh s√°ng (Lighting)**: golden hour, soft light, dramatic shadows, neon‚Ä¶
   - **Chuy·ªÉn ƒë·ªông (Motion)**: chuy·ªÉn ƒë·ªông nh√¢n v·∫≠t, camera, c·∫£nh v·∫≠t
   - **C·∫£m x√∫c / Mood**: t√¨nh c·∫£m, cƒÉng th·∫≥ng, h√†i h∆∞·ªõc, l√£ng m·∫°n‚Ä¶
   - **Phong c√°ch / Style**: cinematic, documentary, minimalist, anime‚Ä¶

2. Provide users with a set of **ready-made templates (M·∫´u)** they can choose from, such as:
   - **Close-up Emotion Shot**: nh·∫•n m·∫°nh c·∫£m x√∫c qua c·∫≠n c·∫£nh g∆∞∆°ng m·∫∑t
   - **Establishing Wide Shot**: gi·ªõi thi·ªáu b·ªëi c·∫£nh r·ªông l·ªõn
   - **Action Tracking Shot**: theo d√µi chuy·ªÉn ƒë·ªông nh√¢n v·∫≠t trong h√†nh ƒë·ªông
   - **Documentary Interview Shot**: phong c√°ch t∆∞ li·ªáu / ph·ªèng v·∫•n
   - **Match-cut Transition**: c·∫Øt gh√©p c·∫£nh c√≥ li√™n k·∫øt √Ω nghƒ©a

3. For each template, include:
   - A **structure outline** (fields to fill in)
   - A **short description** (how/why this template works)
   - A **sample prompt** with placeholders

4. When a user enters their description, adapt it to the chosen template, optimize wording, and output a **final prompt** in both **Vietnamese** and **English** for maximum compatibility with AI tools.

### Output Rules:
- Always maintain **clarity, cinematic detail, and strong visual cues**.
- Keep prompts concise but descriptive (avoid unnecessary adjectives).
- Highlight **motion** clearly (camera + subject + scene).
- Provide both **ready-to-use final prompt** and the **structured breakdown**.

Your ultimate goal is to **help users create cinematic, professional AI video prompts effortlessly** by combining their input with optimized templates.

### Response Format:
**Video Prompt [s·ªë]:**
[Detailed English prompt optimized for AI video tools]

**M√¥ t·∫£ Ti·∫øng Vi·ªát:**
[Vietnamese explanation of the video concept]

**Structured Breakdown:**
- Nh√¢n v·∫≠t: [character details]
- G√≥c quay: [camera technique]
- B·ªëi c·∫£nh: [scene/environment]
- √Ånh s√°ng: [lighting setup]
- Chuy·ªÉn ƒë·ªông: [motion description]
- Mood: [emotional tone]
- Style: [visual style]

**Negative Prompt:**
[Things to avoid in the video]

---`;
        } else {
            return `B·∫°n l√† m·ªôt chuy√™n gia t·∫°o prompt cho AI Art (Stable Diffusion, Midjourney, DALL-E). 
Nhi·ªám v·ª• c·ªßa b·∫°n l√† chuy·ªÉn ƒë·ªïi √Ω t∆∞·ªüng ƒë∆°n gi·∫£n th√†nh c√°c prompt chi ti·∫øt, chuy√™n nghi·ªáp.

Quy t·∫Øc t·∫°o prompt:
1. B·∫Øt ƒë·∫ßu v·ªõi ch·ªß th·ªÉ ch√≠nh
2. Th√™m chi ti·∫øt v·ªÅ h√†nh ƒë·ªông, c·∫£m x√∫c
3. M√¥ t·∫£ m√¥i tr∆∞·ªùng, b·ªëi c·∫£nh
4. Ch·ªâ ƒë·ªãnh phong c√°ch ngh·ªá thu·∫≠t
5. Th√™m th√¥ng s·ªë k·ªπ thu·∫≠t (lighting, composition, quality)
6. K·∫øt th√∫c v·ªõi negative prompt (nh·ªØng g√¨ c·∫ßn tr√°nh)

ƒê·ªãnh d·∫°ng tr·∫£ v·ªÅ:
**Prompt [s·ªë]:**
[M√¥ t·∫£ chi ti·∫øt b·∫±ng ti·∫øng Anh]

**M√¥ t·∫£ ti·∫øng Vi·ªát:**
[Gi·∫£i th√≠ch prompt b·∫±ng ti·∫øng Vi·ªát ƒë·ªÉ ng∆∞·ªùi d√πng hi·ªÉu]

**Negative Prompt:**
[Nh·ªØng g√¨ c·∫ßn tr√°nh b·∫±ng ti·∫øng Anh]

---`;
        }
    }

    toggleDefaultPromptViewer() {
        if (this.defaultPromptViewer.style.display === 'none') {
            this.defaultPromptContent.textContent = this.getDefaultSystemPrompt();
            this.defaultPromptViewer.style.display = 'block';
            this.showDefaultPromptBtn.textContent = 'üîº ·∫®n Prompt M·∫∑c ƒê·ªãnh';
        } else {
            this.defaultPromptViewer.style.display = 'none';
            this.showDefaultPromptBtn.textContent = 'üìù Xem Prompt M·∫∑c ƒê·ªãnh';
        }
    }

    useDefaultPrompt() {
        this.customSystemPromptInput.value = '';
        this.saveSettings();
        alert('‚úÖ ƒê√£ reset v·ªÅ system prompt m·∫∑c ƒë·ªãnh!');
    }

    editDefaultPrompt() {
        const defaultPrompt = this.getDefaultSystemPrompt();
        this.customSystemPromptInput.value = defaultPrompt;
        this.saveSettings();
        
        // Scroll to the textarea
        this.customSystemPromptInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
        this.customSystemPromptInput.focus();
        
        alert('üìù Prompt m·∫∑c ƒë·ªãnh ƒë√£ ƒë∆∞·ª£c t·∫£i v√†o √¥ ch·ªânh s·ª≠a. B·∫°n c√≥ th·ªÉ t√πy ch·ªânh theo √Ω mu·ªën!');
    }

    resetAllSettings() {
        if (confirm('‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën reset t·∫•t c·∫£ c√†i ƒë·∫∑t v·ªÅ m·∫∑c ƒë·ªãnh? (API key s·∫Ω ƒë∆∞·ª£c gi·ªØ l·∫°i) H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!')) {
            // Clear localStorage (except API key)
            localStorage.removeItem('gemini_model');
            localStorage.removeItem('custom_system_prompt');
            
            // Reset form values (keep API key)
            this.modelSelect.value = 'gemini-1.5-flash';
            this.customSystemPromptInput.value = '';
            this.artStyleSelect.value = 'realistic';
            this.detailLevelSelect.value = 'detailed';
            this.aspectRatioSelect.value = '1:1';
            this.numberOfPromptsSelect.value = '3';
            this.negativePromptInput.value = '';
            this.guidanceScaleInput.value = '7';
            this.guidanceValueSpan.textContent = '7';
            this.seedInput.value = '';
            
            // Reset to image tab
            // Switch to image tab and reset style selection
            window.uiStateManager.switchTab('image');
            
            // Reset image style selection
            this.imageStyleOptions.forEach(opt => opt.classList.remove('active'));
            this.imageStyleOptions[0]?.classList.add('active');
            this.artStyleSelect.value = 'realistic';
            
            // Reset video style selection
            this.videoStyleOptions.forEach(opt => opt.classList.remove('active'));
            this.videoStyleOptions[0]?.classList.add('active');
            this.videoStyleInput.value = 'cinematic';
            
            // Hide image default prompt viewer
            if (this.defaultPromptViewer) {
                this.defaultPromptViewer.style.display = 'none';
            }
            if (this.showDefaultPromptBtn) {
                this.showDefaultPromptBtn.textContent = 'üìù Xem Prompt M·∫∑c ƒê·ªãnh';
            }
            
            // Reset template chips
            this.templateChips.forEach(chip => {
                chip.classList.remove('active');
            });
            
            // Reset video-specific settings
            if (this.videoModelSelect) this.videoModelSelect.value = 'gemini-1.5-flash';
            if (this.videoCustomSystemPromptInput) this.videoCustomSystemPromptInput.value = '';
            
            // Hide video default prompt viewer
            if (this.videoDefaultPromptViewer) {
                this.videoDefaultPromptViewer.style.display = 'none';
                if (this.showVideoDefaultPromptBtn) {
                    this.showVideoDefaultPromptBtn.textContent = 'üìù Xem Prompt M·∫∑c ƒê·ªãnh';
                }
            }
            
            alert('üîÑ ƒê√£ reset t·∫•t c·∫£ c√†i ƒë·∫∑t v·ªÅ m·∫∑c ƒë·ªãnh! (API key ƒë∆∞·ª£c gi·ªØ l·∫°i)');
        }
    }

    handleTemplateClick(chip) {
        const template = chip.dataset.template;
        const currentPrompt = this.videoPromptInput.value.trim();
        
        // Toggle selected state
        chip.classList.toggle('active');
        
        // Add or remove template from prompt
        if (chip.classList.contains('active')) {
            if (currentPrompt) {
                this.videoPromptInput.value = currentPrompt + ', ' + template;
            } else {
                this.videoPromptInput.value = template;
            }
        } else {
            // Remove template from prompt
            const newPrompt = currentPrompt.replace(new RegExp(`,?\\s*${template.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}`, 'g'), '').replace(/^,\s*/, '').replace(/,\s*,/g, ',').trim();
            this.videoPromptInput.value = newPrompt;
        }
    }

    validateInputs(contentType) {
        const apiKey = this.apiKeyInput.value.trim() || localStorage.getItem('gemini_api_key');
        const promptInput = contentType === 'image' ? this.imagePromptInput : this.videoPromptInput;
        const prompt = promptInput.value.trim();

        if (!apiKey) {
            window.uiStateManager.showApiKeySection();
            throw new Error('Vui l√≤ng nh·∫≠p API key Gemini');
        }

        if (!prompt) {
            const contentName = contentType === 'image' ? 'h√¨nh ·∫£nh' : 'video';
            throw new Error(`Vui l√≤ng nh·∫≠p √Ω t∆∞·ªüng ${contentName}`);
        }

        if (prompt.length < 5) {
            throw new Error('√ù t∆∞·ªüng qu√° ng·∫Øn. Vui l√≤ng m√¥ t·∫£ chi ti·∫øt h∆°n');
        }

        return { apiKey, prompt };
    }

    getPromptGenerationConfig(contentType) {
        if (contentType === 'image') {
            return {
                artStyle: this.artStyleSelect.value,
                detailLevel: this.detailLevelSelect?.value || 'detailed',
                aspectRatio: this.aspectRatioSelect?.value || '1:1',
                numberOfPrompts: parseInt(this.numberOfPromptsSelect?.value || '3'),
                contentType: 'image'
            };
        } else {
            return {
                artStyle: this.videoStyleInput.value,
                detailLevel: this.videoDetailLevelSelect?.value || 'detailed',
                aspectRatio: this.videoAspectRatioSelect?.value || '16:9',
                numberOfPrompts: parseInt(this.numberOfVideoPromptsSelect?.value || '3'),
                videoLength: this.videoLengthSelect?.value || 'medium',
                contentType: 'video'
            };
        }
    }

    buildSystemPrompt(contentType) {
        let customPrompt;
        
        if (contentType === 'video') {
            customPrompt = this.videoCustomSystemPromptInput?.value.trim();
        } else {
            customPrompt = this.customSystemPromptInput?.value.trim();
        }
        
        if (customPrompt) {
            return customPrompt;
        }

        return this.getDefaultSystemPrompt(contentType);
    }

    showError(message) {
        this.errorMessage.textContent = message;
        this.errorMessage.style.display = 'block';
        this.loadingMessage.style.display = 'none';
    }

    hideError() {
        this.errorMessage.style.display = 'none';
    }

    showLoading(contentType) {
        this.loadingMessage.style.display = 'block';
        
        const generateBtn = contentType === 'image' ? this.generateImageBtn : this.generateVideoBtn;
        const btnText = generateBtn.querySelector('.btn-text');
        const btnLoading = generateBtn.querySelector('.btn-loading');
        
        generateBtn.disabled = true;
        btnText.style.display = 'none';
        btnLoading.style.display = 'flex';
    }

    hideLoading(contentType) {
        this.loadingMessage.style.display = 'none';
        
        const generateBtn = contentType === 'image' ? this.generateImageBtn : this.generateVideoBtn;
        const btnText = generateBtn.querySelector('.btn-text');
        const btnLoading = generateBtn.querySelector('.btn-loading');
        
        generateBtn.disabled = false;
        btnText.style.display = 'inline';
        btnLoading.style.display = 'none';
    }

    async generatePrompts(contentType = 'image') {
        try {
            this.hideError();
            
            // Validate inputs
            const { apiKey, prompt } = this.validateInputs(contentType);
            
            // Initialize AI client with proper API key format
            this.ai = new GoogleGenerativeAI(apiKey);
            
            // Show loading
            this.showLoading(contentType);
            
            // Get configuration
            const config = this.getPromptGenerationConfig(contentType);
            
            // Build the detailed prompt for Gemini
            const systemPrompt = this.buildSystemPrompt(contentType);
            const userPrompt = this.buildUserPrompt(prompt, config);
            
            // Generate prompts using Gemini
            let selectedModel;
            if (contentType === 'video') {
                selectedModel = this.videoModelSelect?.value || 'gemini-1.5-flash';
            } else {
                selectedModel = this.modelSelect?.value || 'gemini-1.5-flash';
            }
            const model = this.ai.getGenerativeModel({ model: selectedModel });
            
            const response = await model.generateContent({
                contents: [{
                    role: 'user',
                    parts: [{ text: systemPrompt + '\n\n' + userPrompt }]
                }],
                generationConfig: {
                    temperature: 0.8,
                    maxOutputTokens: 2048
                }
            });

            // Process results
            this.displayPromptResults(response, prompt, config, contentType);
            
            // Add to history
            if (window.historyManager) {
                window.historyManager.addToHistory(contentType, prompt, response.response.text());
            }
            
        } catch (error) {
            console.error('Error generating prompts:', error);
            this.showError(this.getErrorMessage(error));
        } finally {
            this.hideLoading(contentType);
        }
    }

    buildUserPrompt(userIdea, config) {
        const styleMap = {
            'realistic': 'realistic, photorealistic style',
            'photography': 'professional photography with technical camera terms and lighting',
            'cinematic': 'cinematic style with dramatic camera angles and movie-like composition',
            'anime': 'anime style, manga style, Japanese animation',
            'cartoon': 'cartoon style, animated, stylized illustration',
            'oil-painting': 'oil painting, classical art, traditional painting techniques',
            'watercolor': 'watercolor painting, soft colors, artistic brushwork',
            'digital-art': 'digital art, concept art, modern digital techniques',
            'fantasy': 'fantasy art, magical elements, mystical atmosphere',
            'cyberpunk': 'cyberpunk style, neon lights, futuristic, sci-fi aesthetic',
            'vintage': 'vintage style, retro aesthetic, nostalgic feeling',
            'minimalist': 'minimalist, simple, clean composition, focused elements',
            'commercial': 'commercial photography style, marketing-ready, professional presentation',
            'technical': 'technical illustration, precise details, professional specifications'
        };

        const detailMap = {
            'basic': 'simple description',
            'detailed': 'detailed description with lighting and composition',
            'very-detailed': 'very detailed with specific camera angles, lighting, and artistic techniques',
            'ultra-detailed': 'ultra detailed with professional photography terms, specific art techniques, and quality modifiers'
        };

        const contentTypeText = config.contentType === 'video' ? 'video' : 'h√¨nh ·∫£nh';
        const videoLengthInfo = config.videoLength ? `
ƒê·ªô d√†i video: ${config.videoLength}` : '';
        
        return `√ù t∆∞·ªüng g·ªëc: "${userIdea}"
Lo·∫°i n·ªôi dung: ${contentTypeText}
Phong c√°ch: ${styleMap[config.artStyle]}
M·ª©c ƒë·ªô chi ti·∫øt: ${detailMap[config.detailLevel]}
T·ª∑ l·ªá khung h√¨nh: ${config.aspectRatio}${videoLengthInfo}
S·ªë l∆∞·ª£ng prompt c·∫ßn t·∫°o: ${config.numberOfPrompts}

H√£y t·∫°o ${config.numberOfPrompts} prompt kh√°c nhau cho √Ω t∆∞·ªüng n√†y, m·ªói prompt c√≥ c√°ch di·ªÖn ƒë·∫°t kh√°c nhau nh∆∞ng c√πng phong c√°ch "${config.artStyle}".`;
    }

    getErrorMessage(error) {
        if (error.message.includes('API key') || error.message.includes('401')) {
            return 'API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i API key c·ªßa b·∫°n.';
        }
        
        if (error.message.includes('quota') || error.message.includes('429')) {
            return 'B·∫°n ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng API. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
        
        if (error.message.includes('safety')) {
            return 'N·ªôi dung c·ªßa b·∫°n vi ph·∫°m ch√≠nh s√°ch an to√†n. Vui l√≤ng th·ª≠ m√¥ t·∫£ kh√°c.';
        }
        
        if (error.message.includes('network') || error.message.includes('fetch')) {
            return 'L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.';
        }
        
        return error.message || 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i.';
    }

    displayPromptResults(response, originalIdea, config, contentType) {
        // Get the appropriate results container
        const resultsContainer = contentType === 'image' ? this.imageResults : this.videoResults;
        
        // Clear previous results
        resultsContainer.innerHTML = '';
        
        if (!response.response?.text()) {
            this.showError('Kh√¥ng th·ªÉ t·∫°o m√¥ t·∫£. Vui l√≤ng th·ª≠ l·∫°i.');
            return;
        }

        // Parse the response to extract individual prompts
        const generatedText = response.response.text();
        const prompts = this.parseGeneratedPrompts(generatedText);
        
        if (prompts.length === 0) {
            this.showError('Kh√¥ng th·ªÉ ph√¢n t√≠ch k·∫øt qu·∫£. Vui l√≤ng th·ª≠ l·∫°i.');
            return;
        }

        // Create prompt elements
        prompts.forEach((promptData, index) => {
            this.createPromptElement(promptData, index, originalIdea, config, contentType, resultsContainer);
        });
    }

    parseGeneratedPrompts(text) {
        const prompts = [];
        const sections = text.split('---').filter(section => section.trim());

        sections.forEach((section, index) => {
            const lines = section.trim().split('\n');
            let promptText = '';
            let vietnameseDescription = '';
            let negativePrompt = '';
            let currentSection = '';

            lines.forEach(line => {
                line = line.trim();

                // Check for new format headers
                if (line.startsWith('**Video Prompt') || line.startsWith('**Prompt')) {
                    currentSection = 'prompt';
                } else if (line.startsWith('**English:**')) {
                    currentSection = 'prompt';
                    // Extract content after "English:"
                    const content = line.replace('**English:**', '').trim();
                    if (content) promptText += content + ' ';
                } else if (line.startsWith('**M√¥ t·∫£ Ti·∫øng Vi·ªát:**')) {
                    currentSection = 'vietnamese';
                    // Extract content after "M√¥ t·∫£ Ti·∫øng Vi·ªát:"
                    const content = line.replace('**M√¥ t·∫£ Ti·∫øng Vi·ªát:**', '').trim();
                    if (content) vietnameseDescription += content + ' ';
                } else if (line.startsWith('**Negative Prompt:**')) {
                    currentSection = 'negative';
                    // Extract content after "Negative Prompt:"
                    const content = line.replace('**Negative Prompt:**', '').trim();
                    if (content) negativePrompt += content + ' ';
                } else if (line && !line.startsWith('**') && currentSection) {
                    // Continue collecting content for current section
                    if (currentSection === 'prompt') {
                        promptText += line + ' ';
                    } else if (currentSection === 'vietnamese') {
                        vietnameseDescription += line + ' ';
                    } else if (currentSection === 'negative') {
                        negativePrompt += line + ' ';
                    }
                }
            });

            if (promptText.trim()) {
                prompts.push({
                    prompt: promptText.trim(),
                    vietnameseDescription: vietnameseDescription.trim(),
                    negativePrompt: negativePrompt.trim(),
                    index: index + 1
                });
            }
        });

        return prompts;
    }

    createPromptElement(promptData, index, originalIdea, config, contentType, container) {
        const promptItem = document.createElement('div');
        promptItem.className = 'prompt-item';
        
        const styleMap = {
            'realistic': 'Th·ª±c t·∫ø',
            'anime': 'Anime/Manga',
            'cartoon': 'Cartoon',
            'oil-painting': 'S∆°n d·∫ßu',
            'watercolor': 'M√†u n∆∞·ªõc',
            'digital-art': 'Digital Art',
            'fantasy': 'Fantasy',
            'cyberpunk': 'Cyberpunk',
            'minimalist': 'T·ªëi gi·∫£n',
            'vintage': 'Vintage'
        };
        
        promptItem.innerHTML = `
            <div class="prompt-header">
                <h3 class="prompt-title">Prompt ${promptData.index}</h3>
                <span class="prompt-style">${styleMap[config.artStyle]}</span>
            </div>
            
            ${promptData.vietnameseDescription ? `
                <div class="vietnamese-description">
                    <h4>üìù M√¥ t·∫£ ti·∫øng Vi·ªát:</h4>
                    <p>${promptData.vietnameseDescription}</p>
                </div>
            ` : ''}
            
            <div class="prompt-section">
                <h4>üé® Prompt (English):</h4>
                <div class="prompt-content">${promptData.prompt}</div>
            </div>
            
            ${promptData.negativePrompt ? `
                <div class="prompt-section">
                    <h4>üö´ Negative Prompt:</h4>
                    <div class="prompt-content negative-prompt" style="border-color: #dc3545; background: #fff5f5;">
                        ${promptData.negativePrompt}
                    </div>
                </div>
            ` : ''}
            
            <div class="prompt-meta">
                <span>üí° √ù t∆∞·ªüng g·ªëc: "${originalIdea}"</span>
                <span>üìê T·ª∑ l·ªá: ${config.aspectRatio}</span>
                <span>üé≠ Phong c√°ch: ${styleMap[config.artStyle]}</span>
            </div>
            
            <div class="prompt-actions">
                <button class="copy-prompt-btn" data-prompt-index="${index}">
                    üìã Sao ch√©p Prompt
                </button>
                ${promptData.negativePrompt ? `
                    <button class="copy-negative-btn" data-prompt-index="${index}">
                        üö´ Sao ch√©p Negative
                    </button>
                ` : ''}
                <button class="copy-all-btn" data-prompt-index="${index}">
                    üìÑ Sao ch√©p T·∫•t c·∫£
                </button>
            </div>
        `;
        
        container.appendChild(promptItem);
        
        // Add event listeners for this prompt item
        const copyBtn = promptItem.querySelector('.copy-prompt-btn');
        const copyNegativeBtn = promptItem.querySelector('.copy-negative-btn');
        const copyAllBtn = promptItem.querySelector('.copy-all-btn');
        
        copyBtn.addEventListener('click', () => this.copyPrompt(promptData.prompt));
        
        if (copyNegativeBtn) {
            copyNegativeBtn.addEventListener('click', () => this.copyPrompt(promptData.negativePrompt));
        }
        
        copyAllBtn.addEventListener('click', () => this.copyAllPrompts(promptData));
    }

    async copyPrompt(promptText) {
        try {
            if (!promptText || promptText.trim() === '') {
                this.showError('Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ sao ch√©p.');
                return;
            }
            
            await navigator.clipboard.writeText(promptText.trim());
            this.showSuccessMessage('ƒê√£ sao ch√©p v√†o clipboard! üìã');
        } catch (error) {
            console.error('Copy error:', error);
            // Fallback method
            this.fallbackCopy(promptText);
        }
    }

    async copyAllPrompts(promptData) {
        try {
            let fullText = `Prompt:\n${promptData.prompt}`;
            
            if (promptData.negativePrompt) {
                fullText += `\n\nNegative Prompt:\n${promptData.negativePrompt}`;
            }
            
            await navigator.clipboard.writeText(fullText);
            this.showSuccessMessage('ƒê√£ sao ch√©p t·∫•t c·∫£ prompt v√†o clipboard! üìÑ');
        } catch (error) {
            console.error('Copy all error:', error);
            this.fallbackCopy(fullText);
        }
    }

    fallbackCopy(text) {
        try {
            // Create a temporary textarea
            const textarea = document.createElement('textarea');
            textarea.value = text;
            textarea.style.position = 'fixed';
            textarea.style.opacity = '0';
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);
            
            this.showSuccessMessage('ƒê√£ sao ch√©p v√†o clipboard! üìã');
        } catch (fallbackError) {
            console.error('Fallback copy error:', fallbackError);
            this.showError('Kh√¥ng th·ªÉ sao ch√©p. Vui l√≤ng ch·ªçn v√† copy th·ªß c√¥ng.');
        }
    }

    showSuccessMessage(message) {
        // Remove existing success messages
        const existingSuccess = document.querySelector('.success-message');
        if (existingSuccess) {
            existingSuccess.remove();
        }

        const successDiv = document.createElement('div');
        successDiv.className = 'success-message';
        successDiv.textContent = message;
        
        this.errorMessage.parentNode.insertBefore(successDiv, this.errorMessage);
        
        // Auto hide after 3 seconds
        setTimeout(() => {
            if (successDiv.parentNode) {
                successDiv.remove();
            }
        }, 3000);
    }
}

// Initialize the application components
window.uiStateManager = new UIStateManager();
window.historyManager = new HistoryManager();
window.promptApp = new PromptGenerator();

// Add example prompts
const examplePrompts = [
    "M·ªôt con m√®o d·ªÖ th∆∞∆°ng ƒëang ng·ªìi tr√™n c·ªè xanh d∆∞·ªõi √°nh n·∫Øng m·∫∑t tr·ªùi, phong c√°ch anime",
    "Phong c·∫£nh n√∫i non h√πng vƒ© v·ªõi th√°c n∆∞·ªõc v√† c·∫ßu v·ªìng, phong c√°ch fantasy",
    "Robot th√¢n thi·ªán ƒëang c·∫ßm v√°n tr∆∞·ª£t m√†u ƒë·ªè, phong c√°ch vector t·ªëi gi·∫£n",
    "Th√†nh ph·ªë t∆∞∆°ng lai v·ªõi xe bay v√† t√≤a nh√† cao ch·ªçc tr·ªùi, ban ƒë√™m v·ªõi √°nh ƒë√®n neon",
    "Khu v∆∞·ªùn hoa anh ƒë√†o n·ªü r·ªô v·ªõi con ƒë∆∞·ªùng ƒë√° nh·ªè, phong c√°ch Nh·∫≠t B·∫£n truy·ªÅn th·ªëng"
];

// Add CSS for history items (dynamic styles)
const historyStyles = document.createElement('style');
historyStyles.textContent = `
.history-item {
    background: var(--bg-secondary);
    border-radius: var(--radius-md);
    padding: var(--spacing-md);
    margin-bottom: var(--spacing-md);
    border: 2px solid var(--border-color);
    transition: all var(--transition-base);
}

.history-item:hover {
    border-color: var(--primary-color);
    box-shadow: var(--shadow-md);
}

.history-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-sm);
}

.history-icon {
    font-size: var(--font-size-lg);
}

.history-date {
    font-size: var(--font-size-xs);
    color: var(--text-muted);
}

.history-prompt {
    color: var(--text-secondary);
    font-size: var(--font-size-sm);
    line-height: 1.4;
    margin-bottom: var(--spacing-md);
    border-left: 3px solid var(--primary-color);
    padding-left: var(--spacing-md);
    background: white;
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: var(--radius-sm);
}

.history-actions {
    display: flex;
    gap: var(--spacing-sm);
}

.history-reuse,
.history-delete {
    padding: var(--spacing-xs) var(--spacing-sm);
    border: 2px solid var(--primary-color);
    background: transparent;
    color: var(--primary-color);
    border-radius: var(--radius-sm);
    font-size: var(--font-size-xs);
    font-weight: 500;
    cursor: pointer;
    transition: all var(--transition-base);
    flex: 1;
}

.history-reuse:hover {
    background: var(--primary-color);
    color: white;
}

.history-delete {
    border-color: var(--danger-color);
    color: var(--danger-color);
}

.history-delete:hover {
    background: var(--danger-color);
    color: white;
}
`;
document.head.appendChild(historyStyles);

// Add rotating placeholder functionality
document.addEventListener('DOMContentLoaded', () => {
    const imagePromptInput = document.getElementById('imagePrompt');
    const videoPromptInput = document.getElementById('videoPrompt');
    
    if (imagePromptInput) {
        let exampleIndex = 0;
        setInterval(() => {
            if (!imagePromptInput.value && document.activeElement !== imagePromptInput) {
                imagePromptInput.placeholder = examplePrompts[exampleIndex];
                exampleIndex = (exampleIndex + 1) % examplePrompts.length;
            }
        }, 4000);
    }
    
    // Video examples
    const videoExamples = [
        "M·ªôt con m√®o ƒëang ch·∫°y qua c√°nh ƒë·ªìng hoa, camera theo chuy·ªÉn ƒë·ªông t·ª´ xa ƒë·∫øn g·∫ßn",
        "C·∫£nh b√¨nh minh tr√™n n√∫i, √°nh n·∫Øng chi·∫øu qua s∆∞∆°ng m√π, camera pan t·ª´ tr√°i sang ph·∫£i",
        "Nh√¢n v·∫≠t ƒëang ƒëi b·ªô tr√™n ph·ªë, camera handheld t·∫°o c·∫£m gi√°c t·ª± nhi√™n",
        "Drone bay qua th√†nh ph·ªë v·ªÅ ƒë√™m, ƒë√®n neon lung linh, chuy·ªÉn ƒë·ªông m∆∞·ª£t m√†",
        "C·∫≠n c·∫£nh ƒë√¥i m·∫Øt, zoom out ƒë·ªÉ l·ªô khu√¥n m·∫∑t, √°nh s√°ng k·ªãch t√≠nh"
    ];
    
    if (videoPromptInput) {
        let videoExampleIndex = 0;
        setInterval(() => {
            if (!videoPromptInput.value && document.activeElement !== videoPromptInput) {
                videoPromptInput.placeholder = videoExamples[videoExampleIndex];
                videoExampleIndex = (videoExampleIndex + 1) % videoExamples.length;
            }
        }, 4000);
    }
});

// Add keyboard shortcuts
document.addEventListener('keydown', (e) => {
    // Ctrl/Cmd + 1 = Switch to Image tab
    if ((e.ctrlKey || e.metaKey) && e.key === '1') {
        e.preventDefault();
        window.uiStateManager.switchTab('image');
    }
    
    // Ctrl/Cmd + 2 = Switch to Video tab
    if ((e.ctrlKey || e.metaKey) && e.key === '2') {
        e.preventDefault();
        window.uiStateManager.switchTab('video');
    }
    
    // Ctrl/Cmd + H = Toggle History
    if ((e.ctrlKey || e.metaKey) && e.key === 'h') {
        e.preventDefault();
        if (window.historyManager.historySidebar.classList.contains('active')) {
            window.historyManager.hideHistory();
        } else {
            window.historyManager.showHistory();
        }
    }
});
